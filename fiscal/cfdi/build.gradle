description = 'cfdi'

configurations {
    jaxb
}

task genJaxb {

    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "${projectDir}/src/main/resources/cfdv40.xsd"
    outputs.dir classesDir

    doLast() {

        project.ant {
            // Create output directories
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            taskdef name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath

            xjc(destdir: sourcesDir, schema: schema, 'package': "mx.gob.sat.sitio_internet.cfd") {
                produces(dir: sourcesDir, includes: '**/*.java')
            }

            javac(
                destdir: classesDir, source: 1.8, target: 1.8,
                debug: true, debugLevel: 'lines,vars,source',
                includeantruntime: false, classpath: configurations.jaxb.asPath) {

                src(path: sourcesDir)
                include(name: '**/*.java')
                include(name: '*.java')
            }

            copy(todir: classesDir) {

                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: '**/*.java')
                }
            }     
        }
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

dependencies {

    implementation project(':engine')

    implementation "com.google.zxing:core:3.5.0"
    implementation "com.google.zxing:javase:3.5.0"

    implementation "commons-codec:commons-codec:1.15"

    // Use JUnit Jupiter for testing.
    testImplementation "org.junit.jupiter:junit-jupiter:${junit_jupiter}"

    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
    compileOnly(files(genJaxb.classesDir).builtBy(genJaxb))
}

compileJava.dependsOn 'genJaxb'

jar {
  from genJaxb.classesDir
}
